attribute vec3 v_position;
attribute vec2 v_uv;
attribute vec3 v_normal;

varying vec4 color;
varying vec2 uv;

uniform vec4 l_lightpos;
uniform vec4 l_diffuse;

uniform mat4 mvpMatrix;

void main(void){
	float attenuation = 1.0;
	vec3 normalDirection = normalize( v_normal );
	vec3 lightDirection = normalize( vec3(l_lightpos) );

	if( l_diffuse[3] == 0.0f ){
		attenuation == 1.0;
		lightDirection = normalize( vec3(l_lightpos) );
	}
	else if ( l_diffuse[3] == 1.0 ){
		lightDirection = normalize( vec3(l_lightpos) - v_position );
		attenuation = 1.0;
	}
	else if ( l_diffuse[3] == 2.0 ){
		lightDirection = normalize( vec3(l_lightpos) - v_position );
		float clampedCosine = max( 0.0, dot(-lightDirection, vec3(l_lightpos) ) );
	}

	vec3 diffuseReflection = attenuation * vec3(l_diffuse) * max(0.0, dot(normalDirection, lightDirection));

	gl_Position = mvpMatrix * vec4(v_position, 1.0);
	uv = v_uv;
	color = vec4( diffuseReflection, 1.0 );
}